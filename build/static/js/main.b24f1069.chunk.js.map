{"version":3,"sources":["components/BPMValue.js","components/BPMSlider.js","components/ActionButton.js","serviceWorker.js","index.js","App.js"],"names":["BPMValue","value","className","BPMSlider","setBPM","Slider","track","defaultValue","aria-labelledby","step","min","max","onChange","_","sliderValue","ActionButton","React","useState","playing","togglePlaying","type","onClick","Boolean","window","location","hostname","match","ReactDOM","render","bpm","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yMAGe,SAASA,EAAT,GAA8B,IAAVC,EAAS,EAATA,MACjC,OACE,wBAAIC,UAAU,YAAd,UACMD,EADN,S,YCDW,SAASE,EAAT,GAAuC,IAAlBF,EAAiB,EAAjBA,MAAOG,EAAU,EAAVA,OACzC,OACE,kBAACC,EAAA,EAAD,CACEC,MAAM,SACNC,aAAcN,EACdO,kBAAgB,8BAChBC,KAAM,EACNC,IAAK,GACLC,IAAK,IACLC,SAAU,SAACC,EAAGC,GAAkBV,EAAOU,MCX9B,SAASC,IAAgB,IAAD,EACJC,IAAMC,UAAS,GADX,mBAC9BC,EAD8B,KACrBC,EADqB,KAGrC,OACE,4BACEC,KAAK,SACLlB,UAAU,YACVmB,QAAS,kBAAMF,GAAeD,KAE7BA,EAAU,OAAS,S,MCCNI,QACW,cAA7BC,OAAOC,SAASC,UAEkB,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAC1B,2DCZNC,IAASC,OAAO,mBCAD,WAAe,MAENZ,IAAMC,SAAS,IAFT,mBAErBY,EAFqB,KAEhBzB,EAFgB,KAG5B,OACE,yBAAKF,UAAU,OACb,kBAACF,EAAD,CAAUC,MAAO4B,IACjB,kBAAC1B,EAAD,CAAWF,MAAO4B,EAAKzB,OAAQA,IAC/B,kBAACW,EAAD,CAAcd,MAAO4B,ODPX,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAACC,GAClCA,EAAaC,iB","file":"static/js/main.b24f1069.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default function BPMValue({ value }) {\n  return (\n    <h2 className=\"bpmValue\">\n      {`${value} BPM`}\n    </h2>\n  );\n}\n\nBPMValue.propTypes = {\n  value: PropTypes.number.isRequired,\n};\n","import React from 'react';\nimport Slider from '@material-ui/core/Slider';\nimport PropTypes from 'prop-types';\n\nexport default function BPMSlider({ value, setBPM }) {\n  return (\n    <Slider\n      track=\"normal\"\n      defaultValue={value}\n      aria-labelledby=\"discrete-slider-small-steps\"\n      step={5}\n      min={60}\n      max={240}\n      onChange={(_, sliderValue) => { setBPM(sliderValue); }}\n    />\n  );\n}\n\nBPMSlider.propTypes = {\n  value: PropTypes.number.isRequired,\n  setBPM: PropTypes.func.isRequired,\n};\n","import React from 'react';\n\nexport default function ActionButton() {\n  const [playing, togglePlaying] = React.useState(false);\n\n  return (\n    <button\n      type=\"submit\"\n      className=\"bpmButton\"\n      onClick={() => togglePlaying(!playing)}\n    >\n      {playing ? 'Stop' : 'Start'}\n    </button>\n  );\n}\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost'\r\n    // [::1] is the IPv6 localhost address.\r\n    || window.location.hostname === '[::1]'\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    || window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\r\n    ),\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service '\r\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all '\r\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404\r\n        || (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.',\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then((registration) => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport './App.css';\nimport BPMValue from './components/BPMValue';\nimport BPMSlider from './components/BPMSlider';\nimport ActionButton from './components/ActionButton';\n\nexport default function App() {\n  // futere: this value should be from local storage or a default value\n  const [bpm, setBPM] = React.useState(80);\n  return (\n    <div className=\"App\">\n      <BPMValue value={bpm} />\n      <BPMSlider value={bpm} setBPM={setBPM} />\n      <ActionButton value={bpm} />\n    </div>\n  );\n}\n"],"sourceRoot":""}